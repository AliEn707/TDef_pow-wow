
Tdef::Hero
{
	name: string
	description: string
	properties: text
}
has_and_belongs_to_many Tdef::Hero::Weapon::Type - hero is able to use many weapons types
//SELECT h.*, ARRAY(SELECT id FROM weapons w WHERE ARRAY(SELECT type_id FROM hero_types WHERE hero_id = h.id) @> ARRAY(SELECT type_id FROM weapon_types WHERE weapon_id = w.id)) as weapons FROM heros h; 
//SELECT h.*, ARRAY(SELECT wt.weapon_id FROM weapon_types wt JOIN hero_types ht ON wt.type_id = ht.type_id WHERE ht.hero_id = h.id EXCEPT (SELECT wt2.weapon_id FROM weapon_types wt2 WHERE wt2.type_id not in (SELECT ht2.type_id from hero_types ht2 WHERE ht2.hero_id = h.id))) as weapons FROM heros h; 
// - example of getting objects with other objects, pl will be {1,2,3}
// /|\ not completed

Tdef::Hero::Weapon
{
	name: string
	description: string
	properties: text
}
has_and_belongs_to_many Tdef::Hero::Weapon::Type - types specified for current weapon

Tdef::Hero::Weapon::Type - hero weapon types
{
	name: string
	description: string
	category: string //used to devide different types of types, when only one category instanse may be used
}

Tdef::Hero::Weapon::Mod - hero weapon mod types
{
	name: string
	description: string
	category: string //used to devide different types of modes, when only one category instanse may be used
	modifications: text
}

Tdef::Player::Hero - matching heros and players
{
	player_id: int
	hero_id: int
	weapon_id: int
	mod_id: int // if can be used only one mod
	position: string - (int int)
	//other params
}
has_and_belongs_to_many Tdef::Hero::Weapon::Mod // if can be used many mods

