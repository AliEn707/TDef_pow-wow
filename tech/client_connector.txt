connector must provide next functions for javascript:

mapGetData()
    - returns string of objects, got from server, like [{aa:11},{bb:22},{cc:33}]
sendToConnector(text:String) 
	- simple text send to connector, not used
mapConnect(host:String, port:String) 
	- connect to map
mapClose() 
	- close map socket and clear handlers
publicConnect(host:String, port:String, user:String, token:String) 
	- connect to public
mapSend(value:String) 
	- send data to map
publicSend(value:String) 
	- send data to public
		- value in format "type1,value1,type2,value2"
		types:
			byte - signed 1 byte
			char - the same is byte
			short - signed 2 bytes
			int - sidned 4 bytes
			uint - undsigned 4 bytes
			float - float 4 bytes
			double - float 8 bytes
			string - 16 byte string long, then sequence of bytes

JavaScript available functions:

connectorReady() - callback after connector initialised
sendToJavaScript(str) - used for logging (~ console.log(str))
isReady() - returns that javascript is ready
publicConnectionError(value) - callback on error connect to public
publicConnected(value) - callback on connected to public
publicAuthFail() - callback on public autentification fail
proceedPublicMessages(str) - str is string: array of objects like [{aa:11},{bb:22},{cc:33}]
mapConnectionError(val) - callback on connected to map
mapConnected() - callback on connection established
mapClosed() - callback on map connection close
mapAuthData() - callback on map auth


map objects format:
Info:
{
	objtype: "Info",
	type: string, //'start_timer'
	data: int
}

Npc: 
{
	objtype: "Npc",
	id: int,
!	create: 1, // create
!		owner: int, // create
!		type: int, // create
!	grid: {
		x: float,
		y: float
	}
!	level: int,
!	health: int,
!	shield: int,
!	status: int,
}

Tower:
{
	objtype: "Tower",
	id: int,
!	create:1,// create
!		type: int,
!		owner: int,
!		position: int,
!	target: short,
!	level: short,
!	health: int,
!	shield: int,
}

Bullet:
{
	objtype: "Bullet",
	id: int,
!	grid:{
		x: float,
		y: float
	}
!	create: 1,
!		type: int,
!		owner: int,
!		source: {
			x: float,
			y: float
		}
!	detonate: byte,
}

Player:
{
	objtype:"Player",
	id: int,
!	create: 1,
!		pid: int,
!		group: int,
!		_hero_counter: int,
!		base_type: {
			health: int,//fix
		},
!		hero_type: {
			health: int,//fix
			shield: int,//fix
		},
!	tower_set: {
	//for(i=0;i<NPC_SET_SIZE;i++)
		i: {,
			id: int,
			size: int,
		},
	}
!	npc_set: {
		//for(i=0;i<TOWER_SET_SIZE;i++){
		i: {
			id: int,
			size: int,
		}
	}
!	hero: int,
!	hero_counter: int,
!	base: int,
!	level: int,
!	money: int,
!	targeting: short,
!	fail: 1,
!		exp: int,
}